plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    // Avro
    id 'com.github.davidmc24.gradle.plugin.avro-base'  version '1.0.0'
}

group = 'com.gonggong'
version = '0.3.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://packages.confluent.io/maven"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    //    어노테이션 주입하는 의존성
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    implementation "javax.annotation:javax.annotation-api:1.3.2"
    //  pgvector
    implementation group: 'com.pgvector', name: 'pgvector', version: '0.1.5'
    //  AWS S3
    implementation "software.amazon.awssdk:s3:2.13.0"
    // Apache PDFBox
    implementation 'org.apache.pdfbox:pdfbox:2.0.24'
    // Hibernate
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // pgvector 의존성
    implementation group: 'org.hibernate', name: 'hibernate-vector', version: '6.4.0.Final', ext: 'pom'
    implementation group: 'io.hypersistence', name: 'hypersistence-utils-hibernate-62', version: '3.8.1'

    // Kafka
    implementation 'org.springframework.kafka:spring-kafka'
    // Avro
    implementation group: 'org.apache.avro', name: 'avro', version: '1.11.3'
    implementation group: 'io.confluent', name: 'kafka-avro-serializer', version: '7.0.1'
    implementation group: 'io.confluent', name: 'kafka-streams-avro-serde', version: '7.6.0'

}

tasks.named('test') {
    useJUnitPlatform()
}

// avro build
def generateAvro = tasks.register("generateAvro", com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask) {
    source("src/main/java/math/ai/my/kafka/infra/avro")
    outputDir = file("src/main/java/math/ai/my/kafka/infra/avrobuild")
    fieldVisibility = "PRIVATE"
    enableDecimalLogicalType = true
}